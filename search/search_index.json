{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tbtAMR","text":"<p>Welcome to the home of tbtAMR the newest member of the tAMR family of tools - cousin of abritAMR.</p>"},{"location":"#what-tbtamr-is","title":"What tbtAMR is.","text":"<p>tbtAMR was developed to address the need for a data-driven and flexible solution to inferring DST for M. tuberculosis in a clinical and public health laboratory. tbtAMR generates genomic DST results that are suitable for reporting in a clinical setting. In order to facillitate this users are able to supply at a minimum a vcf file (annotated with snpEff) and either leverage a default mutational catalougue and criteria. Or provide their own catalogues and intepretative criteria in csv format. This means that there is no need for a developer to update logic or databases, which makes updates and therefore reverification much more straightforward and user-firendly in a CPHL setting. In addition, with additional dependencies, if required DST can also be reported from paired-end reads.</p> <p></p>"},{"location":"#what-tbtamr-is-not","title":"What tbtAMR is NOT.","text":"<p><code>tbtAMR</code> is not</p> <ul> <li>A database or catalogue of mutations (although it can take these as inputs)</li> <li>For any sequences that are NOT M. tuberculosis</li> <li>A tool to identify relationships between sequences or samples</li> <li>A report generator - tbtAMR provides results in a way that can be easily incorporated into LIMS. For detailed instructions for installation, basic usage and use of your own custom criteria check out the links on the left</li> </ul>"},{"location":"#a-note-about-vcf-formats-and-annotation","title":"A note about vcf formats and annotation","text":"<p>Ultimately the new tbtAMR was born out of a need to have lightweight tool that could very easily slip into existing pipelines with few dependencies and very little overhead in terms of maintenance. At its core - it does not matter what sequencing technology is used - as long as there is a vcf file that is annotated correctly (for detailed information about vcf specifications please look here and here).</p> <p>By default the assumption is that the format of the vcf file is correct and that annotation has been undertaken by snpEff in order to be compatible with the format in which variants are described in WHO catalogue version 2. If you want to use a different annotation format you will need to make sure that the catalogue of mutations you use is formatted in the same way. There is more about this in the Customising your inputs section.</p>"},{"location":"cascade_reporting/","title":"Is this a waterfall?","text":"<p>No we are not talking waterfalls. We are talking about customising reporting for DST for M. tuberculosis in a clinical and/or PH setting. In these settings, you may want to capture the variants and interpretations of all drugs in a sequence, but due to poor performance of inferring resistance for some drugs or the particulars of the jurisdiction or location for which the report is being generated, it may not be appropriate to report all of these to a client. So <code>tbtAMR</code> allows you to generate a \"cascade report\". These reports are based on rules supplied by the user in the catalogue config file (see here for an example and here) for explanation. What this means is that the user can specify: </p> <p>If resistance is observed to these drugs, then report these drugs. Otherwise just report default drugs. </p> <p>This is not a feature that would be suited to all, but may be useful in some situations. Note that <code>tbtAMR</code> will generate and keep mutliple reports, depending on the setup in your configuration files.</p>"},{"location":"customisation/","title":"Customisation","text":""},{"location":"customisation/#hands-free-updates-sort-of","title":"Hands-free updates (sort of)","text":"<p><code>tbtAMR</code> was designed to allow for flexible updates to the mutational catalogue and/or to the interpretative criteria for that catalogue. The codebase of <code>tbtAMR</code> is designed to read these files and apply the user-defined criteria to the mutations detected in the vcf file. In this way, there is no need for bioinformatician or developer to modify interpretative logic. A wet-lab or medical microbiologist can update the criteria as required. Obviously a bioinformatician is exceedingly useful in running the tool, but the technical overhead of update and maintenance of criteria that is so important to effective and appropriate reporting of DST in M. tuberculosis is much less (freeing us all up for other fun stuff!!).</p> <p>The way this works is that the files described below allow you to customise:</p> <ul> <li>what the result you report looks like for example you might want to report <code>resistant</code> and <code>not resistant</code></li> <li>how that result is determined, it may be based on categorical values or single variant values.</li> <li>how the overall profile of the sequence should be reported</li> </ul>"},{"location":"customisation/#inputs-required","title":"Inputs required","text":""},{"location":"customisation/#vcf-file-obviously","title":"VCF file - obviously!","text":"<p>The VCF file must be generated using an appropriate reference genome. Appropriateness is based on your catalogue of mutations, whatever reference genome positions are used in the catalogue must be able to be linked to the correct positions in the VCF file. Note <code>tbtAMR</code> will not fall over if your VCF file is not generated with the correct reference genome - BUT you may get unexpected results. It is up to you to know which is the correct reference genome.</p> <ul> <li>This can be generated by <code>tbtAMR</code> or be supplied by the user (see <code>How to run</code>)<ul> <li>By default <code>tbtAMR</code> assumes H37rv version 2 is the reference used for vcf generation. This is to maintain consistency with the WHO v2 catalogue.</li> </ul> </li> </ul>"},{"location":"customisation/#catalogue-of-mutations","title":"Catalogue of mutations","text":"<p>This is a csv file and contains information of the mutations that you are interested in detecting in your sequence. Every mutation that you are interested in needs have its own line (see here for examples). The following information is REQUIRED:</p> <ul> <li>A column with the names of drugs you are trying to infer resistance to.</li> <li>A column with the gene name</li> <li>A the actual variants you are looking for (example gene_x.change)</li> <li>The confidence of each variant to cause resistance. This actually does not really need to be a confidence level or metric. But it is used in the next file (interpretative criteria) to provide a result based on a category (rather than on a variant by variant basis).</li> </ul> <p>It does not matter really what you call these columns, you will supply this information in the <code>catalogue config</code> file (see below). Furthermore you are welcome to have additional columns as well that you may use in the interpretative criteria file to provide more control.</p>"},{"location":"customisation/#interpretative-criteria","title":"Interpretative criteria","text":"<p>This is perhaps the most challenging file to construct/understand. This is where the 'magic' happens. This is also a csv file and in this file you will describe how variants should be interpreted.</p> <p>Criteria are heirarchical.</p> <ul> <li><code>default</code> criteria will be applied first, these should be your categorical rules, typically based on the 'confidence' column. These are criteria where you can apply a single category to a large block of variants.</li> <li><code>override_simple</code> criteria are used where a single condition (or column) that will change the default behaviour</li> <li><code>override_complex</code> is where you have more than one condition (or columns) that will change the default behaviour</li> </ul> <p>Table below describes the columns in the interpretation criteria file. Not it does not matter what order these columns are in. </p> Column name Column Required Description drug Yes This is the name of the drug that this criteria is applied to. This needs to be a SINGLE drug and must be exactly the same as in your catalogue. If you have the same rule for multiple drugs, you will need an extra line for each drug. Drugs cannot be grouped together. rule_type Yes <code>default</code>,<code>override_simple</code>,<code>override_complex</code>. As mentioned above, rules are heirarchical, <code>default</code> rules are applied first and any <code>override</code> rule will modify the result of that <code>default</code> rule. number_conditions Yes This column informs how many columns or conditions are used in the criteria, <code>default</code> and <code>override_simple</code> criteria will have 1 condition, more complex criteria will have more ie where more than one column in the catalogue is involved. column_1 Yes This is the condition to check and MUST reflect a column in your catalogue values_1 Yes Possible values of <code>column_1</code> that define your criteria, if there are more than one possibility these should be separated with ';' comparator_1 Yes This is the relationship between <code>values_1</code> and <code>column_1</code>, typically it is the word <code>in</code> target_1 Yes This is also required to link the relationships between columns and values, for all cirteria this will be <code>values</code> shape Yes This can be left empty and should only be used where there is a length aspect to the criteria, for example where a single variant is detected. Possible values are <code>== X</code>, <code>&gt; X</code> , <code>&gt;= X</code>, where <code>X</code> is the shape/size column_X No Where you have <code>override_complex</code> rules X will reflect integers (2, 3 and so on). This is another column in your catalogue that should be checked to test the criteria values_X No Where you have <code>override_complex</code> rules X will reflect integers (2, 3 and so on). Possible values of <code>column_X</code> that define your criteria, if there are more than one possibility these should be separated with ';' comparator_X No Where you have <code>override_complex</code> rules X will reflect integers (2, 3 and so on). This is the relationship between <code>values_X</code> and <code>column_X</code>, typically it is the word <code>in</code> target_X No Where you have <code>override_complex</code> rules X will reflect integers (2, 3 and so on). This is also required to link the relationships between columns and values, for all cirteria this will be <code>values_X</code> join Yes Where you have more than a single condition to be met - this defines how they are relate. Possibilities are <code>&amp;</code> or <code>|</code> interpretation Yes What value should be reported as a consequence of this criteria being evaluated to <code>True</code> description Yes This can be left blank, but may be useful for information purposes to supply a reason why this interpretation has been reported"},{"location":"customisation/#classification-criteria","title":"Classification criteria","text":"<p>For reporting M. tuberculosis DST the WHO classification is often also supplied. <code>tbtAMR</code> has default criteria that follows the latest WHO criteria, but if you would like to define your own - or have them displayed differently in the outputs you can supply a classification criteria file (also a csv file). These criteria are applied after the interpretation criteria have been used to establish to what drugs a sequence exhibits resistance to. Therefore these criteria are based on drug-resistances NOT on genes, mechanisms or variants.</p> Column name Description classification This is the words you want displayed for each classification shape This is where your criteria is dependent upon the number of drug classes in which non-susceptibility is observed. Possible values are <code>== X</code>, <code>&gt; X</code> , <code>&gt;= X</code>, where <code>X</code> is the shape/size drug_class_condition The drug class that the drug or drugs fit into <code>first-line</code> or leave blank required_condition This is the drug (or drugs) where resistance has been detected. Where multiple drugs are part of the criteria, they should be separated by <code>&amp;</code> or <code>|</code> comparator <code>tbtAMR</code> will extract a list of drugs to which the sequence exhibits resistance, this field reflects how the <code>required_condition</code> should be assessed against this list. Typically it should be set to <code>in</code> exclusion_comparator <code>tbtAMR</code> will extract a list of drugs to which the sequence exhibits resistance, this field reflects how the <code>exlusionary_condition</code> should be assessed against this list. Typically it should be set to <code>not in</code> exlusionary_condition This criteria is in the list of drugs the sequences exhibits resistance too. optional_condition Where a condition is optional, it may be present"},{"location":"customisation/#catalogue-config-file","title":"Catalogue config file","text":"<p>This is a <code>.json</code> file and this is the file that ties everything together. It is recommended that you use the example file here as a template to ensure that all the relevant fields are supplied. Below is a description of each important key and examples of possible values.</p>"},{"location":"customisation/#describe-the-catalogue","title":"Describe the catalogue","text":"Key Description Example gene_name_col The column in your catalogue where the gene names are listed <code>gene</code> variant_col The column in your catalogue where the variants are listed <code>variant</code> drug_name_col The column in your catalogue where the drug names are listed <code>drug</code> confidence_column The column in your catalogue where confendence levels are listed, as stated above - these don't NEED to be condfidences as such - but they do need to be categories that can group variants <code>FINAL CONFIDENCE GRADING</code>"},{"location":"customisation/#describe-the-confidence-category-and-resistance-levels","title":"Describe the confidence category and resistance levels","text":"Key Description confidence_levels This itself a dictionary, with each key being a confidence (or category) and the key being its order of precendence (lower the number higher the precedence. ie The value that indicates the highest confidence should have the lowest number and so on - only include levels which will be reported. confidence_key The confidence key should describe what values you want to appear in the output of tbtamr. If you don not want these to change just repeat the value. resistance_levels The levels of resistance that should be reported - these should be consistent with values in your rules and classification rules files, values that have the lowest value indicate the higher resistance level where more than one value is supplied."},{"location":"customisation/#describe-the-drugs","title":"Describe the drugs","text":"Key Description drugs_to_infer A list of drugs you wish to infer on - these must be contained in your catalogue drugs_to_report A list of drugs you wish to report in the finalised output of tbtamr split into <code>first-line</code> and <code>other</code> - these must be contained in your catalogue"},{"location":"customisation/#cascade-reporting","title":"Cascade reporting","text":"<p>Where you have selected to use a cascade reporting structure, you will define here the default drugs and then increasing levels.</p> Key Description cascade_reporting Group drugs for casecade reporting structure. This should have drugs grouped in order of reporting - this grouping does not need to have any relationship to drug classification or who criteria and is only representative of the order the user wishes to report. There must be a <code>default</code> set of drugs that will appear in all reports, followed by increasing levels as <code>levelX</code>. Within the <code>levelX</code> key there will be two keys required <code>resistance_to_any</code> - which determines what resistances will trigger this level and then <code>report</code> which is what genes to report at this level"},{"location":"customisation/#variant-format","title":"Variant format","text":"<p>There may be times when you use a different catalogue, where variants are expressed in a format not consistent with WHO v2 catalogue. If this is the case - you need to ensure that the annotation format of you VCF is consistent with the pattern in your catalogue. If you do decide to go down this route, you will need to supply the format of your variant, so that it can be checked with your catalogue. If these do not match <code>tbtAMR</code> will error and not report DST.</p> Key Description catalogue_variant This is a list of regex expressions that reflect the values in your vcf file annotation and should be consistent with your catalogue"},{"location":"customisation/#examples","title":"Examples","text":"<p>You can find examples for all of these criteria files here, it is highly recommended that you modify these example files to fit your needs.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pip-simple-install","title":"pip (simple install)","text":"<p>If you already have annotated vcf files and you do not need to do any variant calling or annotation, you can simply install the basic <code>tbtAMR</code> python package. Just to be clear this is a bare bones installation and you will not be able to use fastq files or unannotated vcf files as inputs.. If you require annotation - please see below.</p> <p>You will need have python=3.10 or greater installed on your system (although management with mamba or conda is also ofcourse possible - actually recommended)</p> <p>Optional: <pre><code>mamba create -n tbtamr python=3.10\nmamba activate tbtamr\n</code></pre> OR  <pre><code>conda create -n tbtamr python=3.10\nconda activate tbtamr\n</code></pre> Required: <pre><code>pip3 install tbtamr\n</code></pre></p>"},{"location":"installation/#bioconda-recommended","title":"Bioconda (recommended)","text":"<p>You can use <code>conda</code> to install the full <code>tbtAMR</code> package. This installation allows you to generate a vcf file from paired end reads, annotate a vcf file and/or generate genomic DST results.</p> <pre><code>conda (or mamba) create -n tbtamr tbtamr\nconda activate tbtamr \ntbtamr -v\n&gt; 1.0.3\n</code></pre>"},{"location":"installation/#custom","title":"Custom","text":""},{"location":"installation/#tbtamr-annotation","title":"<code>tbtAMR</code> + annotation","text":"<p>In some cases you may have a vcf file - but need annotation (and do not want any of the variant calling dependencies). </p> <pre><code>conda(mamba) create -n tbtamr snpEff\nconda(mamba) activate tbtamr\npip3 install tbtamr==1.0.3\n</code></pre>"},{"location":"installation/#tbtamr-lineage-calling","title":"<code>tbtamr</code> + lineage calling","text":"<p>If you would like to run lineage calling you can install <code>pathogenprofiler</code> into your environment - note that this requires <code>bcftools</code>.</p> <pre><code>conda activate tbtamr\nconda install bcftools (if you use conda to install tbtamr there is NO NEED for this step - only install bcftools if you use the pip3 simple install approach)\npip3 install git+https://github.com/jodyphelan/pathogen-profiler@v4.3.0\npip3 install pysam joblib tqdm pydantic requests\n</code></pre> <p>I have not suggested to install this with conda (which it absolutely can be if that works for you) as some of the dependency versions may clash with the <code>mutAMR</code> compatible dependencies. If you wish to use <code>conda</code> to install <code>pathogen-profiler</code> please be aware that there may be unexpected behaviour</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#before-you-start","title":"Before you start","text":"<p><code>tbtAMR</code> can take any correctly formatted VCF file - which means that it is sequence platform agnostic. Alternatively, you can also supply Illumina paired-end reads as sqeuence input, providing you have installed <code>mutAMR</code> correctly. However when designing and developing <code>tbtAMR</code> some assumptions were made. </p> <ul> <li>If you are using vcf as input - it is formatted correctly.</li> <li>Annotation was undertaken using snpEff or another annotation tool which adheres to specification found here. If you supply an un-annotated vcf and have snpEff installed, <code>tbtAMR</code> will annotate for you (see HERE for installation instructions)</li> </ul>"},{"location":"usage/#is-your-vcf-file-correctly-formatted","title":"Is your vcf file correctly formatted?","text":"<p>There is a standard for generation of VCF files, you can learn more about this here. Most bioinformatics tools will (should) follow this standard, if the tool you are using does not - there is no guarantee that <code>tbtAMR</code> behaviour will be as expected. Basic checks will be undertaken to ensure that your VCF is correct and if obvious issues are detected <code>tbtAMR</code> will error and ask you to check your inputs. However, if you are using a tool that does not follow this standard, but generates a file that mostly looks correct, <code>tbtAMR</code> may not detect the difference, it will appear to run correctly but the outputs may be unexpected or incorrect. If this is the case, please check your VCF generation and make sure that it follows the above linked specifications.</p>"},{"location":"usage/#have-you-installed-tbtamr-to-run-the-way-you-want-to-run","title":"Have you installed <code>tbtAMR</code> to run the way you want to run?","text":"<p>If you are supplying an annotated VCF as input and have no need for VCF generation or annotation, you can just install <code>tbtAMR</code> as describe here. However, if you would like to supply paired-end fastq files as input, you will need to make sure that you have installed <code>tbtAMR</code> as descibed here.</p> <p>Alternatively, you can also just install <code>snpEff</code> and <code>tbtAMR</code> and described here if you want <code>tbtAMR</code> to annotate your VCF file.</p>"},{"location":"usage/#a-note-on-lineage-calling","title":"A note on lineage calling.","text":"<p>By default, <code>tbtAMR</code> does not call lineage for M. tuberculosis, you can do this if you like by following the installation instructions here and using the <code>--call_lineage</code> flag.</p>"},{"location":"usage/#generating-genomic-dst-using-default-criteria-tbtamr-defaults","title":"Generating genomic DST using default criteria (tbtAMR defaults)","text":""},{"location":"usage/#vcf-input","title":"VCF input","text":"<pre><code>tbtamr predict --vcf sample.vcf.gz -s sample_name\n</code></pre>"},{"location":"usage/#paired-end-reads-input","title":"paired-end reads input","text":"<pre><code>tbtamr full -1 R1.fq.gz -2 R1.fq.gz -s sample_name\n</code></pre>"},{"location":"usage/#add-phylogenetic-lineage-to-outputs","title":"Add phylogenetic lineage to outputs","text":"<p>Please make sure that you have installed <code>pathogen-profiler</code> as described here.</p> <p><pre><code>tbtamr predict --vcf sample.vcf.gz -s sample_name --call_lineage\n</code></pre> OR</p> <pre><code>tbtamr full -1 R1.fq.gz -2 R1.fq.gz -s sample_name --call_lineage\n</code></pre>"},{"location":"usage/#generating-genomic-dst-using-custom-criteria","title":"Generating genomic DST using custom criteria","text":"<p>Check out the instructions for defining criteria here, example files can also be found here.</p> <p><pre><code>tbtamr predict --vcf sample.vcf.gz -s sample_name -c custom_mutational_catalogue.csv -cfg custom_db_config.json -r custom_interpretation_criteria.csv -cr custom_classification_criteria.csv\n</code></pre> OR</p> <pre><code>tbtamr full -1 R1.fq.gz -2 R1.fq.gz -s sample_name -c custom_mutational_catalogue.csv -cfg custom_db_config.json -r custom_interpretation_criteria.csv -cr custom_classification_criteria.csv\n</code></pre>"},{"location":"usage/#use-tbtamr-to-generate-annotated-vcf-file-no-dst","title":"Use <code>tbtAMR</code> to generate annotated VCF file (no DST)","text":"<p>It is unclear why you may want to do this - but the functionality is here for you if you want to use it</p> <p><pre><code>tbtamr fq2vcf -1 R1.fq.gz -2 R1.fq.gz -s sample_name\n</code></pre> OR <pre><code>tbtamr annotate --vcf sample.vcf.gz -s sample_name\n</code></pre></p>"},{"location":"usage/#search-your-catalogue-for-variant-information","title":"Search your catalogue for variant information","text":"<p><code>tbtAMR</code> also allows you to quickly peruse your catalogue - which can be useful if you don't want to break excel and you have a large catalogue.</p> <p><pre><code>tbtamr search -q rpoB_p.Ser540Leu rpoB_p.Ser540Ala\n</code></pre> If you are using a custom catalogue - you will need to do </p> <pre><code>tbtamr search -q some_query -c custom_mutational_catalogue.csv -cfg custom_db_config.json\n</code></pre>"},{"location":"usage/#output-files","title":"Output files","text":"<p><code>tbtAMR</code> will output two files as standard. </p> <ol> <li> <p>The first is <code>tbtamr_results.csv</code>. This is essentially the raw output of your interpretative criteria, this may include reportable and non-reportable results (depending on how the interpretative criteria and catalogue configuration are set up).</p> </li> <li> <p>The second file is <code>tbtamr_linelist_report.csv</code>. This file is a filtered version of what is in the <code>tbtamr_results.csv</code>, with only results deemed appropriate for reporting (as defined by the interpretative criteria and catalogue configuration).</p> </li> </ol> <p>If you have added the <code>--cascade</code> flag, and have <code>cascade_reporting</code> set up in the catalogue configuration, a 3rd file will be created 3. <code>tbtamr_linelist_cascade_report.csv</code>, this is a further filtered version of the linelist report, with specific drugs reported based on the resistance profile detected. For more information see here and here.</p> <p>Note all output files are designed to be simple csv to allow for straightforward management and incorporation into LIMS. <code>tbtAMR</code> does not make any assumptions as to how the reports should appear or be communicated.</p>"}]}