import argparse, sys
from distutils.command.install_egg_info import to_filename
from tbtamr.AmrSetup import AmrSetup
from tbtamr.RunProfiler import RunProfiler
from tbtamr.Collate import Inferrence, Parse, Mdu
from tbtamr.TbTamr_Utils import check,install
from tbtamr.version import __version__, db_version

"""
tbtamr is designed to implement TB-profiler and parse the results compatible for MDU use. It may also be used for other purposes where the format of output is compatible

"""

def install_deps(args):
    install()

def check_deps(args):
    check()

def collate_results(args):

    to_collate = Parse(args)
    isolates = to_collate.extract_inputs()
    C = Inferrence(isolates)
    C.infer()


def run_pipeline(args):
    P = AmrSetup(args)
    input_data = P._setup()
    T = RunProfiler(input_data)
    output_data = T._run()
    C = Inferrence(output_data)
    C.infer()
    

def mdu(args):
   M = Mdu(args)
   M.mduify()


def set_parsers():
    parser = argparse.ArgumentParser(
        description="Genomic AMR prediction pipeline for Mtb", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
    
    subparsers = parser.add_subparsers(help="Task to perform")
    parser_sub_run = subparsers.add_parser('run', help='Run tbtamr pipeline', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_collate = subparsers.add_parser('collate', help='Collate results from a previous tbtamr run', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_mdu = subparsers.add_parser('mdu', help='Collate results of tbtamr for mdu-reporting', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    parser_sub_run.add_argument(
        "--read1",
        "-r1",
        default="",
        help="Path to read1 - not required if tab-delimited file (--data) provided.",
    )
    parser_sub_run.add_argument(
        "--read2",
        "-r2",
        default="",
        help="Path to read2 - not required if tab-delimited file (--data) provided.",
    )
    parser_sub_run.add_argument(
        "--prefix",
        "-px",
        default="tbtamr",
        help="If running on a single sample, please provide a prefix for output directory",
    )
    parser_sub_run.add_argument(
        "--input",
        "-i",
        default="",
        help="Tab-delimited file with sample ID as column 1 and path to read1 and read2 as column 2 and 3. ",
    )
    parser_sub_run.add_argument(
        "--jobs", 
        "-j", 
        default=1, 
        help="Number of TB-profile jobs to run in parallel - strongly recommended to limit this to < 4. THIS IS NOT CPUS. Each TB-profiler job will be allocated 8 cpus."
    )
    parser_sub_run.add_argument(
        "--qc_min_cov", 
        "-mc", 
        default=0, 
        help="The median coverage of a reads across H37rV genome for QC"
    )
    parser_sub_run.add_argument(
        "--qc_perc_mapped", 
        "-pm", 
        default=0, 
        help="The percentage of sequences mapped to the H37rV for QC"
    )
    parser_sub_run.add_argument(
        "--min_depth", 
        default=20, 
        help="The depth required at individual sites to call a base. STRONGLY recommended not to change this setting"
    )
    parser_sub_run.add_argument(
        "--database_prefix", 
        "-db_prefix", 
        default="tbtamr", 
        help="Database prefix. If you would like to use the db provided directly by TB-profiler, please use 'tbdb'. Otherwise, provide your own prefix if using a custom DB"
    )
    parser_sub_run.add_argument(
        "--database_path", 
        "-db_path", 
        default='', 
        help="Path to database of drug-resistance mutations. If using a custom DB - please make sure you have correctly formatted it (https://github.com/jodyphelan/TBProfiler)"
    )
    parser_sub_run.add_argument(
        '--keep', 
        action = 'store_true', 
        help = 'Keep all accessory files created by TB-profiler - default is to remove all accessory and intermediate files produced by TB-Profiler.'
    )
    parser_sub_run.add_argument(
        '--keep_bam', 
        action = 'store_true', 
        help = 'Keep only bam files generated by TB-profiler - default is to remove all accessory and intermediate files produced by TB-Profiler.'
    )
    parser_sub_run.add_argument(
        '--exclude_not_reportable', 
        action = 'store_true', 
        help = 'Only report Resistant and Low-level resistant conferring mutations.'
    )

    parser_sub_run.add_argument(
        '--min_cov',
        '-m',
        help="Minimum median genome coverage",
        default= 40
    )

    parser_sub_run.add_argument(
        '--prop_mtb',
        help="Minimum proportion M.tb",
        default= 80
    )
    
    parser_sub_collate.add_argument(
        '--isolates',
        '-i',
        help="Isolate ID or file containing list of isolates (one per line) to collate."
    )
    parser_sub_collate.add_argument(
        '--exclude_not_reportable', 
        action = 'store_true', 
        help = 'Only report Resistant and Low-level resistant conferring mutations.'
    )
    parser_sub_collate.add_argument(
        '--min_cov',
        '-m',
        help="Minimum median genome coverage",
        default= 40
    )
    parser_sub_collate.add_argument(
        '--prop_mtb',
        help="Minimum proportion M.tb",
        default= 80
    )

    parser_sub_mdu.add_argument(
        '--json',
        '-j',
        nargs='+',
        default='',
        help="tbtamr.json files for mduifying"
    )

    parser_sub_mdu.add_argument(
        '--runid',
        '-r',
        help="Run ID - if empty tbtamr will be used",
        default='tbtamr'
    )
    parser_sub_mdu.add_argument(
        '--output_name',
        '-o',
        help="The name of the spreadsheet for output",
        default= 'MMS155'
    )
    parser_sub_mdu.add_argument(
        '--min_cov',
        '-m',
        help="Minimum median genome coverage",
        default= 40
    )
    parser_sub_mdu.add_argument(
        '--prop_mtb',
        help="Minimum proportion M.tb",
        default= 80
    )
    
    parser_setup_deps = subparsers.add_parser('setup', help='Install tbtamr dependencies.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_check_deps = subparsers.add_parser('check', help='Check tbtamr dependencies.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser_sub_run.set_defaults(func=run_pipeline)
    parser_sub_collate.set_defaults(func = collate_results)
    parser_sub_mdu.set_defaults(func = mdu)
    parser_setup_deps.set_defaults(func = install_deps)
    parser_check_deps.set_defaults(func = check_deps)
    args = parser.parse_args(args=None if sys.argv[1:]  else ['--help'])
    return args

# 
def main():
    """
    run pipeline
    """

    args = set_parsers()
    args.func(args)
    

if __name__ == "__main__":
    main()
